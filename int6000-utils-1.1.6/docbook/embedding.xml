<chapter id='embedded'>
	<title>
		Embedded Applications
		</title>
	<section id='embedded-intro'>
		<title>
			Introduction 
			</title>
		<para>
			The Intellon Linux Toolkit has been developed with embedded applications in mind but it is not an embedded turn-key system. The Intellon Toolkit will cross-compile and run on several embedded controllers but Intellon does not claim to support cross-compilation for any particular environment or guarantee proper program execution on all hardware platforms. Customers should have (or obtain) embedded system expertise or allow time to develop the expertise before attempting any embedded project.
			</para>
		<para>
			Many embedded systems use <acronym>NVRAM</acronym> for persistent storage. When power is applied, an image is read from <acronym>NVRAM</acronym> into <acronym>SDRAM</acronym> and executed. The image contains an operating system kernel and filesystem image. The kernel mounts the filesystem image and starts applications found there. This filesystem stores application programs, support libraries and configuration files and should have enough free space for temporary files that might be needed. A common system uses <productname>Linux</productname> as the operating system kernel, <productname>Busybox</productname> as the principle application and <productname>uClib</productname> as the support library. All executable components must be compiled for the target host processor instruction set. 					</para>
		</section>
	<section id='embedded-ADM5120'>
		<title>
			<productname>ADM5120</productname>
			</title>
		<para>
			</para>
		<section id="ADM5120-connection">
			<title>
				Connections
				</title>
			<para>
				The <productname>ADM5120</productname> has several communication ports including one internal serial port, two external usb ports and two ethernet interfaces with five ethernet ports. The ethernet ports are configured as a gateway where that four ports service a Local Area Network (<acronym>LAN</acronym>) interface and the fifth port services a Wide Area Network (<acronym>WAN</acronym>) interface.	
				</para>
			</section>
		<section id="ADM5120-usb-serial">
			<title>
				USB-to-Serial Port Connection
				</title>
			<para>
				Since most of our computers do not have an external serial port we obtained a USB-to-serial cable and modified the serial connector for the interal <productname>ADM5120</productname> serial connector. The following steps explain how to connect to the <productname>AMD5120</productname> using a USB-to-serial cable and communicate with it using the <application>minicom</application> terminal emulation program. The serial port characteristics are 115200 bps, 8 data bits, 1 stop bit, no parity, no hardware flow control, no software flow control.

				</para>
			<orderedlist>
				<listitem>
					<para>
						Connect the serial end of the USB serial cable to the interal <productname>ADM5120</productname> serial connector and power on the <productname>ADM5120</productname> device. Let device will boot up as you perform the next steps.
						</para>
					</listitem>
				<listitem>
					<para>
						Plug the USB serial adapter into the <productname>ubuntu</productname> host. Confirm that device <filename>/dev/ttyUSB0</filename> have been created. This device is now the USB serial port.
						</para>
					</listitem>
				<listitem>
					<para>
						Configure the <application>minicom</application> program by opening a console window and typing the command <command>minicom -s</command>. A text-based popup window should appear displaying the <application>minicom</application> configuration menu.
						</para>
					</listitem>
				<listitem>
					<para>
						Use the cursor keys to select option <command>Serial port setup</command> then press <userinput>Enter</userinput>. Another text-based popup window should appear displaying serial port parameters.
						</para>
<screen>
    +-----------------------------------------------------------------------+   
    | A - Serial Device         : /dev/ttyUSB0                              |   
    | B - Lockfile Location     : /var/lock                                 |   
    | C - Callin Program        :                                           |   
    | D - Callout Program       :                                           |   
    | E - Bps/Par/Bits          : 115200 8N1                                |   
    | F - Hardware Flow Control : No                                        |   
    | G - Software Flow Control : No                                        |   
    |                                                                       |   
    |    Change which setting?                                              |   
    +-----------------------------------------------------------------------+   
</screen>
					<orderedlist>
						<listitem>
							<para>
								Press the letter <userinput>A</userinput> to select the <command>Serial Device</command> and type <userinput>/dev/ttyUSB0</userinput> then press <userinput>Enter</userinput>. This assumes you are using a USB-to-serial cable;  otherwise, name the appropriate tty device.
								</para>
							</listitem>
						<listitem>
							<para>
								Press the letter <userinput>E</userinput> to select the <command>Bps/Par/Bits</command> and type <userinput>115200 8N1</userinput> then press <userinput>Enter</userinput>.
								</para>
							</listitem>
						<listitem>
							<para>
								Press the letter <userinput>F</userinput> to toggle <command>Hardware Flow Control</command> until it indicates <userinput>No</userinput>. 						
								</para>
							</listitem>
						<listitem>
							<para>
								Press the letter <userinput>F</userinput> to toggle <command>Software Flow Control</command> until it indicates <userinput>No</userinput>. 						
								</para>
							</listitem>
						<listitem>
							<para>
								Press <userinput>Enter</userinput> when done to close the <command>Serial port setup</command> window and return to the <command>configuration</command> window.
								</para>
							</listitem>
						</orderedlist>
					</listitem>
				<listitem>
					<para>
						Use the cursor keys to select option <command>Filenames and paths</command> and press <userinput>Enter</userinput>. Another text-based popup window should appear displaying various pathname options.
						</para>
<screen>
    +-----------------------------------------------------------------------+
    | A - Download directory : /home/mydir/AMiLDA                           |
    | B - Upload directory   : /home/mydir/AMiLDA                           |
    | C - Script directory   :                                              |
    | D - Script program     : runscript                                    |
    | E - Kermit program     :                                              |
    | F - Logging options                                                   |
    |                                                                       |
    |    Change which setting?                                              |
    +-----------------------------------------------------------------------+
</screen>
					<orderedlist>
						<listitem>
							<para>
								Press the letter <userinput>A</userinput> to select the <command>Download directory</command> then type a valid pathname then press <userinput>Enter</userinput>.  
								</para>
							</listitem>
						<listitem>
							<para>
								Press the letter <userinput>B</userinput> to select the <command>Upload directory</command> then type a valid pathname then press <userinput>Enter</userinput>. 								
								</para>
							</listitem>
						</orderedlist>
					<para>
						<application>Minicom</application> truncates long pathnames without giving any immediate indication so keep your pathnames short.
						</para>
					<para>
						The <productname>AMiLDA</productname> build stream places file <filename>vmlinuz</filename> in folder <filename>/usr/src/AMiLDA/linux-2.4.32-amilda/</filename> by default but that pathname is too long and will be truncated. You may want to modify the build stream to place the file in another location or copy the file to another location or create a symlink to the file from another location.  
						</para>
					</listitem>
				<listitem>
					<para>
						Use the cursor keys to select option <command>Save setup as dfl</command> then press <userinput>Enter</userinput>.	This will save your setting as file <filename>/etc/minicom/minirc.dfl</filename>.					
						</para>
					</listitem>
				<listitem>
					<para>
						Use the cursor keys to select option <command>Exit</command> and press <userinput>Enter</userinput> to close the <command>configuration</command> window and start the <application>minicom</application> program. Assuming the <productname>ADM5120</productname> is properly connected and powered up,  you should see the <application>Linux</application> login prompt in the console window.
						</para>
					</listitem>
				</orderedlist>
			</section>
		<section id="ADM5120-boot-menu">
			<title>
				Bootloader Menu
				</title>
			<para>
				Power cycle the <productname>ADM5120</productname> board to see the boot prompt. You will have about two or three seconds to press the space three times before the the <application>Linux</application> system starts to bootload. If you are fast enough then you should see the following menu and be able to download a new <filename>vmlinuz</filename> image into either <acronym>SDRAM</acronym> or <acronym>NVRAM</acronym> via a menu.
				</para>
			<example>
				<title>
					<productname>ADM5120</productname> Boot Menu
					</title>
<screen>
ADM5120 Boot:

Linux Loader Menu
====================
(a) Download vmlinuz to flash ...
(b) Download vmlinuz to sdram (for debug) ...
(c) Exit

Please enter your key :
</screen>
				</example>
			<para>
				After typing either <command>a</command> or <command>b</command>,  you will have about 8 seconds to commence an XMODEM protocol download of you image file. The actual filename is not important but the file format is important. If you select option <command>b</command> then the image file can be a standard <trademark>Linux</trademark> vmlinuz file. If you select option <command>a</command> then the image file must a standard <trademark>Linux</trademark> image file with header and checksum. If you select option <command>c</command>, either the flashed or the downloaded <filename>vmlinuz</filename> image will execute and proceed to a <application>login</application> prompt.
				</para>
			<para>
				Although <application>minicom</application> can be used to download firmware images,  Intellon recommends using scripts <filename>download.sh</filename> and <filename>flash.sh</filename>,  instead. They are easier to use and are more reliable. See <link linkend="AMiLDA-download">Downloading Images</link> for more information about these scripts.
				</para>
			</section>
		</section>
	<section id='eAMiLDA'>
		<title>
			<productname>AMiLDA</productname>
			</title>
		<para>
			Intellon has been experimenting with the <productname>AMiLDA</productname> distribution for the <productname>AMD5120</productname>. The <productname>AMiLDA</productname> distribution includes a <productname>Linux</productname> kernel, the <productname>Busybox</productname> application and the <productname>uClib</productname> library. Intellon has integrated the Intellon Linux Toolkit into a copy of this distribution for our own use.
			</para>
		<para>
			This section documents the steps needed to compile <productname>AMiLDA</productname>. The information is taken from public information available on the internet and our own experiences with <productname>AMiLDA</productname>. Intellon does not endorse, recommend or support this hardwaer or software in any way. We merely provide some information as a courtesy to customers who may be interested.
			</para>
		<section id='AMiLDA-compiling'>
			<title>
				Compiling
				</title>
			<orderedlist>
				<listitem>
					<para>
						Obtain the <productname>Edimax</productname> toolchain, <filename>tool-chain.tar.gz</filename>, and save it in any location that your prefer.
						</para>
					</listitem>
				<listitem>
					<para>
						Extract the <productname>Edimax</productname> toolchain to the root filesystem folder. The toolchain must be located there or compile errors will occur. The resulting folder, <filename>/export/tools</filename>, contains a pre-compiled set of build tools for the <productname>ADM5120</productname> that will execute in place of the normal tools installed on your system whenever the <productname>AMiLDA</productname> build stream is executed.
						</para>
<screen>
# tar -vzxf tool-chain.tar.gz -C /
</screen>
					</listitem>
				<listitem>
					<para>
						Obtain the <productname>AMiLDA</productname> source tree and save it in any location that your prefer.
						</para>
					</listitem>
				<listitem>
					<para>
						Extract the <productname>AMiLDA</productname> source tree to the folder <filename>/usr/src</filename>. The source tree must be located there or compile errors will occur. The resulting folder,  <filename>/usr/src/AMiLDA</filename>, contains a <productname>Linux</productname> kernel and custom applications.
						</para>
<screen>
# tar -vzxf AMILDA.tar.gz -C /usr/src
</screen>
					</listitem>
				<listitem>
					<para>
						Before attempting a compile the kernel, install the <application>bison</application> and <application>flex</application> packages. This should install contemporary <application>yacc</application>-style and <application>lex</application>-style components needed by the kernel build stream.
						</para>
<screen>
# apt-get install bison flex
</screen>
					</listitem>
				<listitem>
					<para>
						From folder <filename>/usr/src/AMiLDA</filename> execute command <command>make clean</command> to purge old kernel and application object files and temporary files created by previous builds.
						</para>
					</listitem>
				<listitem>
					<para>
						From folder <filename>/usr/src/AMiLDA/linux-2.4.32</filename> execute command <command>make oldconfig</command> to build a new <filename>.config</filename> file.
						</para>
					<para>
						If you encouter an error indicating that folder <filename>include/asm</filename> cannot be deleted because it is a directory then manually delete the directory with the command <command>rm -fr include/asm</command>. The folder will be replaced with a symbolic link during the build process. The folder contents is sometime included when the tree it archived because it is a symbolic link.
						</para>
					</listitem>
				<listitem>
					<para>
						In folder <filename>/usr/src/AMiLDA/linux-2.4.32</filename> execute command <command>make dep</command> to build new kernel files.
						</para>
					</listitem>
				<listitem>
					<para>
						In folder <filename>/usr/src/AMiLDA</filename> execute command <command>make</command> to build new system. This operation takes some time to complete. 
						</para>
					</listitem>
				</orderedlist>
			</section>
		<section id="AMiLDA-images">
			<title>
				Firmware Images
				</title>
			<para>
				The Intellon build stream creates two firmware image files. File <filename>AMiLDA/linux/vmlinuz</filename> is a standard <productname>Linux</productname> image file. It can be dowloaded directly into <productname>ADM5120</productname> <acronym>SDRAM</acronym> and temporarily executed there. File <filename>AMiLDA/image/vmlinuz</filename> is an encapsulated version of the standard<productname>Linux</productname> image having an header and checksum. It can be dowloaded and flashed into <productname>ADM5120</productname> <acronym>NVRAM</acronym> for permanent execution.
				</para>
			<para>
				Program <application>AMiLDA/image/cvimg</application> can be used to convert the standard <productname>Linux</productname> image file, <filename>AMiLDA/linux/vmlinuz</filename>, to an encapsulated image file. AN encapsulated image file is the only one needed to replicate your system on multiple <productname>ADM5120</productname> devices. You may also want to distribute script <filename>flash.sh</filename>, described in the next section, with the encapsulated image.
				</para>
			</section>
		<section id="AMiLDA-download">
			<title>
				Downloading Images
				</title>
			<para>
				Intellon does not recommend using <application>minicom</application> to download and flash firmware because it can be awkward to configure and change. Instead,  we recomend using one of the two <application>expect</application> scripts included with our build stream. Establish a serial connection to the <productname>ADM5120</productname>,  start one of the scripts then power-cycle the <productname>ADM5120</productname>. The script will monitor the serial line for Boot Menu prompts and respond by downloading and flashing or executing the appropriate image. 
				</para>
			<para>
				Both scripts are located in the <filename>AMiLDA</filename> folder. Both scripts have constants that name the serial <constant>device</constant> and download file. One script downloads and executed an image in SDRAM. The other downloads and flashes NVRAM then loads the image into SDRAM and executes it. 
				</para>
			<para>
				Close all serial connections to the ADM5120 before running either script or download will fail. Start one of the scripts and power-cycle the ADM5120. Downloading should begin almost at once. Examples are shown below. Open a serial connection only after dowloading terminates.
				</para>
			<example>
				<title>
					Using script <filename>download.sh</filename>
					</title>

<screen>
# download.sh
spawn [open ...]
* Restart the router.

ADM5120 Boot:



Linux Loader Menu
====================
(a) Download vmlinuz to flash ...
(b) Download vmlinuz to sdram (for debug) ...
(c) Exit

Please enter your key : Sending /usr/src/AMiLDA/linux/vmlinuz, 11165 blocks: Give your local XMODEM receive command now.
Xmodem sectors/kbytes sent: 3965/495k
</screen>
				<para>
					Script <application>download.sh</application> will download the standard image file <filename>AMiLDA/linux/vmlinuz</filename> to <acronym>SDRAM</acronym> and start execution using option <constant>b</constant> on the <productname>ADM5120</productname> boot menu. 
					</para>
				</example>
			<example>
				<title>
					Using script <filename>flash.sh</filename>
					</title>

<screen>
# download.sh
spawn [open ...]
* Restart the router.

ADM5120 Boot:



Linux Loader Menu
====================
(a) Download vmlinuz to flash ...
(b) Download vmlinuz to sdram (for debug) ...
(c) Exit

Please enter your key : Sending /usr/src/AMiLDA/linux/vmlinuz, 11165 blocks: Give your local XMODEM receive command now.
Xmodem sectors/kbytes sent: 3965/495k
</screen>
				<para>
					Script <application>flash.sh</application> downloads the encapsulated image file <filename>AMiLDA/image/vmlinuz</filename> then flashes <acronym>NVRAM</acronym> using option <constant>a</constant> on the <productname>ADM5120</productname> boot menu. 
					</para>
				</example>
			<para>
				To use these scripts,  you must first install the Linux <application>expect</application> application. On GNU Linux based distributions, the command <command>apt-get install expect</command> will download and install it. Other distributions will require different commands. 
				</para>
			</section>
		</section>


	<section>
		<title>
			<productname>Busybox</productname>
			</title>
		<para>
			<productname>Busybox</productname> is a monolithic application program that implements most standard <productname>GNU</productname> utilities included in many <productname>Linux</productname> distributions. The <productname>AMiLDA</productname> distribution used by Intellon includes <application>Busybox-1.10.0</application> and <application>Linux-2.4.32</application>. These two components provide a nearly complete operating environment. 
			</para>
		<para>
			Intellon has made no changes to <productname>Linux</productname> and only a few changes <productname>Busybox</productname> as provided.
			</para>
		</section>
	<section id="AMiLDA-ramdisk">
		<title>
			Ramdisk
			</title>
		<para>
			Folder <filename>AMiLDA/ramdisk</filename> contains the <filename>Makfile</filename> that creates a compressed filesystem image that is loaded into <acronym>SDRAM</acronym> and mounted when <productname>Linux</productname> boots. You should study this <filename>Makefile</filename> carefully because most system changes will require changes here.
			</para>
		<para>
Essentially,  this <filename>Makefile</filename> creates a temporary folder, mounts it as an <application>ext2</application> filesystem, populates it with required folders and files, unmounts it and compresses it. The compressed image is ultimately included in the image file <filename>AMiLDA/linux/vmlinuz</filename>. 			
			</para>
		<para>
			This section covers the folders and files needed for proper operation of the Intellon Linux Toolkit. It does not cover any other folders and files that may be needed by components of the <productname>AMiLDA</productname> environment. 
			</para>
		<section id="AMiLDA-bin">
				<title>
					Intellon Toolkit
					</title>
				<para>
					The Intellon Toolkit requires folder <filename>/usr/local/bin</filename> to be present on the ramdisk. This folder must be created and desired programs should be copied there. Additionally, this folder should be added to the user environment,  in some way, because it is not part of the standard <productname>Busybox</productname> environment.
					</para>
				</section>
		<section id="AMiLDA-website">
			<title>
				Web Interface
				</title>
			<para>
				The Intellon Toolkit web interfaces requires the following folders and files to be present on the ramdisk.
				</para>
			<variablelist>
				<varlistentry>
					<term>
						<filename>/www/cgi-bin</filename>
						</term>
					<listitem>
						<para>
							Contains the main application program,  <filename>intellon.cgi</filename>, that receives and services <acronym>CGI</acronym> requests sent from the client browser. This folder must be created on the ramdisk and desired application programs copied to it. In addition, this folder should be added to the user environment, in some way, on login since is is not part of the standard <productname>Busybox</productname> environment.
							</para>
						</listitem>
					</varlistentry>
				<varlistentry>
					<term>
						<filename>/www/styles</filename>
						</term>
					<listitem>
						<para>
							Contains the main application stylesheet, <filename>amilda.css</filename>. This folder must be creted on the ramdisk and the ctylesheet must be copied to it.
							</para>
						</listitem>
					</varlistentry>
				<varlistentry>
					<term>
						<filename>/www/images</filename>
						</term>
					<listitem>
						<para>
							Contains application images. This folder must be created on the ramdisk and the required images copied to it.
							</para>
						</listitem>
					</varlistentry>
				<varlistentry>
					<term>
						/var/state
						</term>
					<listitem>
						<para>
							Contains the application session variable, <filename>intellon.dat</filename>. This folder must be created on the ramdisk, if it does not already exist,  or the web interace will not preserve information from one session to the next. A default session variable may be copied here, but it is not required, because it is dynamically created.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>


	<section id="AMiLDA-toolkit">
		<title>
			Intellon Toolkit
			</title>
		<para>
			The Intellon Linux Toolkit may be installed as part of the <productname>AMiLDA</productname> environment when space permits. The toolkit needs the <productname>Linux</productname> kernel and <productname>uClib</productname> library to function;  however, the toolkit web interface also needs an <acronym>HTTP</acronym> server with <acronym>CGI</acronym> enabled. The web interfaces is an independent application that does not rely on any other toolkit programs for proper operation.
			</para>
		<section id="AMiLDA-integration">
			<title>
				Integration
				</title>
			<para>
				This section explains how to integrate and cross-compile the Intellon Linux Toolkit for the <productname>ADM5120</productname>. It assumes that you have installed the <productname>Edimax</productname> toolchain and <productname>AMiLDA</productname> distribution as described in the <link linkend="AMiLDA-compiling">Compiling</link> section.
				</para>
			<orderedlist>
				<listitem>
					<para>
						Obtain the latest version of the Intellon Linux Toolkit archive and save it anwhere that your prefer. The archive filename will reflect the toolkit version and so <filename>int6000-utils-x.x.x</filename>,  used here, refers to whatever version you have. 
						</para>
					</listitem>
				<listitem>
					<para>
						Extract the toolkit into folder <filename>/usr/src/AMiLDA/apps</filename>. The resulting folder should have the same name as the archive file and not overwrite previous versions. You may either keep or discard earlier versions, depending on your requirements.
						</para>
<screen>
# tar -vzxf int6000-utils-x.x.x.tar.gz -C /usr/src/AMiLDA/apps
# ls /usr/src/AMiLDA/apps
</screen>
					</listitem>
				<listitem>
					<para>
						From folder <filename>/usr/src/AMiLDA/apps</filename>, create a symbolic link to the new toolkit folder. This link allows scripts to access the correct version of the toolkit using a constant pathname so make sure the link is correct. A common problem is forgetting to set this link correctly.
						</para>
<screen>
# ln -fs int6000-utils-x.x.x linux
</screen>
					</listitem>
				<listitem>
					<para>
						Edit file <filename>/usr/src/AMiLDA/app/linux/make.def</filename>. Uncomment the two lines that define symbols <constant>CROSS</constant> and <constant>CROSS_LINUX</constant>. The standard definitions assume that you installed the <productname>Edimax</productname> toolchain as described in the <link linkend="AMiLDA-compiling">Compiling</link> section. If not then change the definitions to reflect the actual location.
						</para>

<screen>
# file: make.def

# ====================================================================
# Edimax Hardware;
# --------------------------------------------------------------------

PLATFORM=-D_ADM5120_
MODEL=-D_6104KP_
ENDIAN=-D_LITTLE_ENDIAN_
GATEWAY=y

# ====================================================================
# AMiLDA Software; uncomment these lines when cross-compiling;
# --------------------------------------------------------------------

# CROSS=/export/tools/mipsel-linux-uclibc/bin/mipsel-uclibc-
# CROSS_LINUX=/export/tools/bin/mipsel-linux-

# ====================================================================
# toolchain;
# --------------------------------------------------------------------

CC=$(CROSS)gcc
STRIP=$(CROSS)strip
LD=$(CROSS)ld
AR=$(CROSS)ar
RANLIB=$(CROSS)ranlib
CAS=$(CROSS)gcc -c
CPP=$(CROSS)gcc -E

# ====================================================================
# folders;
# --------------------------------------------------------------------

BIN=/usr/local/bin
MAN=/usr/share/man/man7
WWW=/home/www

# ====================================================================
# permissions;
# --------------------------------------------------------------------

OWNER=0
GROUP=0
</screen>
					</listitem>
				<listitem>
					<para>
						From folder <filename>/usr/src/AMiLDA/apps/linux</filename>, cross-compile the toolkit using the cross-compile toolchain that you defined in the previous step. Save build errors and warnings to file <filename>compile.log</filename> then inspect the file afterwards. Warnings are permitted but errors are not. You should have virtually no warnings.
						</para>
<screen>
# make clean
# make 2> compile.log
# cat compile.log
</screen>
					</listitem>
				</orderedlist>
			<para>
				The toolkit is now cross-compiled for the <productname>ADM5120</productname>. There is no need to re-compile unless you make changes. Subsequent <productname>AMiLDA</productname> compilation will automatically compile the toolkit via dependencies defined in file <filename>/usr/src/AMiLDA/apps/Makefile</filename>.
				</para>
			</section>
		<section id="AMiLDA-configuration">
			<title>
				Configuration
				</title>
			<para>
				To be continued ...
				</para>
			</section>
		</section>
	<section id="http-interface">
		<title>
			HTTP Interface
			</title>
		<para>
			The Intellon <acronym>HTTP</acronym> interface is a prototype that demonstrates one way to remotely inspect and manage a network of Intellon devices in a host independent manner. The key features are simplicity and small size. The only environmental requirements are an <acronym>HTTP</acronym> web server that supports <acronym>CSS2</acronym> and <acronym>CGI</acronym> and enough space to store the application and image files.
			</para>
		<para>
			The interface application consists of one <acronym>CGI</acronym> program image and one (or two) image files. Major components are located in the toolkit <filename>cgi</filename> folder. Minor components are located in neighboring toolkit folders. The application is not automatically compiled or installed when the toolkit is compiled or installed. It must be compiled and installed independently using the <filename>Makefile</filename> found in the <filename>cgi</filename> folder. The <filename>Makefile</filename> has variables that define installation target folders.
			</para>
		<para>
			The interface can be compiled on any Linux host then tested using a web server,  such as <productname>Apache</productname>,  with <productname>CSS2</productname> and <acronym>CGI</acronym> support enabled. The application can then be cross-compiled for other targets and downloaded when ready.
			</para>
<screen>
LAN_IP_ADDR='192.168.3.1'
LAN_NETMASK='255.255.255.0'
LAN_GATEWAY='0.0.0.0'
LAN_MAC_ADDR='000000000000'
LAN_DHCP_ENABLE=1
LAN_DHCP_START='192.168.3.100'
LAN_DHCP_END='192.168.3.254'
WAN_MODE=0
WAN_IP_ADDR='192.168.99.2'
WAN_NETMASK='255.255.255.0'
WAN_GATEWAY='192.168.99.10'
WAN_MTU=0
WAN_MAC_ADDR='000000000000'
WAN_PPPOE_USER=''
WAN_PPPOE_PASS=''
WAN_PPPOE_DOM=''
DNS_SERVER1='0.0.0.0'
DNS_SERVER2='0.0.0.0'
DNS_SERVER3='0.0.0.0'
FW_ENABLED=0
FW_SYN_ENABLED=1
FW_SYN_RATE=5
FW_SYN_TIME=0
FW_SYN_BURST=3
FW_POD_ENABLED=1
FW_POD_RATE=5
FW_POD_TIME=0
FW_POD_BURST=3
FW_PS_ENABLED=1
FW_PS_LEVEL=5
FW_NAT_ENABLED=0
USR_LOGIN='admin'
USR_PASSWORD='1234'
HOST_NAME='nitwit3'
HOST_DOMAIN='intellon.net'
</screen>

		</section>
	</chapter>
